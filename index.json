{
  "index.html": {
    "href": "index.html",
    "title": "Yaap | Yaap",
    "keywords": "Yaap Yaap is a straight up port of python venerable tqdm to .NET / CLR Yaap stands for Y et A nother A NSI P rogressbar Feel free to browse some of the articles like the Getting Started page, FAQ or figure out how to get the best looking progress bar under Windows , alternatively consule the API docs What does it do Much like in python, Yaap can make .NET loops, IEnumerable s and more show a smart progress meter. Here's what Yaap's own Demo looks like: Simple Yaap Colored Yaap Paused/Stalled Nested Multi-threaded Simple Yaap Colored Yaap Paused/Stalled Nested Multi-threaded using static Yaap.YaapConsole; using static Enumerable; ... foreach (var i in Range(0, 200).Yaap(settings: new YaapSettings {Description = \"regular\", Width = 100})) { Thread.Sleep(100); switch (i) { case 50: WriteLine(\"The (re)drawing of the progress bar, happens in the background\"); break; case 100: Write(\"As long as you use YaapConsole.Write* methods....\"); break; case 150: WriteLine(\" ... you can continue writing to the terminal\"); break; } } using static Enumerable; ... foreach (var i in Range(0, 200).Yaap(settings: new YaapSettings { Description = \"regular\", Width = 100, ColorScheme = YaapColorScheme.Bright})) Thread.Sleep(100); using static Enumerable; var yaap = Range(0, 2000).Yaap(settings: new YaapSettings { Description = \"regular\", Width = 100, ColorScheme = YaapColorScheme.Bright, SmoothingFactor = 0.5, }); foreach (var i in yaap) { ... yaap.State = YaapState.Paused; ... yaap.State = YaapState.Running; ... yaap.State = YaapState.Stalled; ... yaap.State = YaapState.Running; } foreach (var i in Range(0, 3).Yaap(settings: new YaapSettings { Description = \"nested1\", UseMetricAbbreviations = true })) foreach (var j in Range(0, 10).Yaap(settings: new YaapSettings { Description = \"nested2\", UseMetricAbbreviations = true })) foreach (var k in Range(0, 100_000_000).Yaap(settings: new YaapSettings { Description = \"nested3\", UseMetricAbbreviations = true })) ; // Oh, just do nothing here using static Enumerable; var threads = Range(0, 10).Select(ti => new Thread(() => { var r = new Random((int) (DateTime.Now.Ticks % int.MaxValue)); foreach (var i in Range(0, 200).Yaap(settings: new YaapSettings { Description = $\"thread{ti}\", VerticalPosition = ti }) { Thread.Sleep(r.Next(90, 110) / (ti + 1)); })).ToList(); foreach (var t in threads) t.Start(); What is a Yaap made of What Else Yaap has the following features: Feature Blurb Easy wrapping of IEnumerable<T> with a Yaap progress bar foreach (var i in Enumerable.Range(0, 1000).Yaap()) { } Manual (non IEnumerable<T> ) progress updates var y = new Yaap(100); y.progress = 99; Low latency (~30ns) on enumeration Generally speaking, everything happens in background thread, and the enumeration is un-hindered Checkout the benchmarks Zero allocation (post construction) What can I say, I just really hate alloactions Checkout the benchmarks Full progress bar with smooth unicode and numeric progress, time and rate Yaap will detect unicode support and will opt to use the default unicode block charchter based theme, but you can use additional unicode themes using the provided BarStyle enumeration if you are a special snowflake When unicode is not supported by the terminal, we us the plain ole' # char Elapsed time tracking / Total Time Prediction Yaap will time the elapsed time and predict the remaining time No-Embarrassment guarantee or your money back** Yaap will never make you lose face with showing embarrassing things like 101% completion, or having the elapsed time go past the predicted time (Instead we'll keep changing the predicted time!) Rate Prediction Uses advanced machine learning to predict total estimated time (team available for acquihire) 1 1 OK, I lied, Just using Kalman filters effectively instead Metric Abbreviation for counts (K/M/G...) Yaap can automatically use metric units ( K / M / G ) Nested / Multiple concurrent progress bars Yaap will automatically detect nested progress bars with no extra effort on your part Colors Yaap can do normal 16 color palette or force TrueColor in case someone redifined yellow in their infinite wisdom Butter Smooth Progress bars Yaap can predict progress from rate, allowing smooth progress bars, even on slow/choppy enumeration Butter Smooth Nested Progress bars Yaap can estimate progress in higher level loops from the progress of their sub-loops(!) Yaap will NEVER .Count() your IEnumerable Yaap never calls .Count() . It does other ungodly things to try and get your IEnumerable \"length\" in weird/undocumented ways, and when all fails, it will miserably fail, asking you to provide the Total value anagrammatically Turn elements on/off Works on Windows But you have to work for it, at least bit Dynamic Resizing Constant Width"
  },
  "api/Yaap.YaapElement.html": {
    "href": "api/Yaap.YaapElement.html",
    "title": "Enum YaapElement | Yaap",
    "keywords": "Enum YaapElement An enumeration representing the various yaap progress bar elements Namespace : Yaap Assembly : Yaap.dll Syntax [PublicAPI] [Flags] public enum YaapElement Fields Name Description All A special or'd value representing all elements of Yaap Description The description prefix visual Yaap element ProgressBar The graphical progress bar visual Yaap element ProgressCount The progress count (e.g. 199/200) visual Yaap elements ProgressPercent The numerical percent (e.g. 99%) visual Yaap element Rate The rate visual Yaap element Time The elapsed/total time visual Yaap elements"
  },
  "api/Yaap.html": {
    "href": "api/Yaap.html",
    "title": "Namespace Yaap | Yaap",
    "keywords": "Namespace Yaap Classes TerminalColor A class that represents a color that is either originated from System.ConsoleColor instance or from a System.Drawing.Color instance. Yaap Represents a text mode progress bar control, that can visually provide user feedback as to the progress a long-standing operation, including progress visualization, elapsed time, total time, rate and more YaapColorScheme A class representing the various colors that can be applied to Yaap YaapConsole A wrapper for System.Console Write*() APIs that makes sure the console writing doesn't interefere with Yaap operations YaapEnumerable<T> Represents a Yaap wrapped System.Collections.Generic.IEnumerable<T> object, where the enumerator progress automatically changes the Yaap visual representation without further need to manually update the progress state YaapEnumerableExtensions A static extension class that provides System.Collections.Generic.IEnumerable<T> YaapEnumerable<T> wrappers YaapSettings Yaap visual settings, used when constructing a Yaap object Enums ANSIColor An enum representing the one true set of 3/4 bit ANSI colors Feel free to read more about ansi color codes: https://en.wikipedia.org/wiki/ANSI_escape_code#Colors YaapBarStyle An enumeration representing the various visual styles of a Yaap progress bar component YaapElement An enumeration representing the various yaap progress bar elements YaapState The current state of the Yaap instance"
  },
  "api/Yaap.YaapEnumerable-1.html": {
    "href": "api/Yaap.YaapEnumerable-1.html",
    "title": "Class YaapEnumerable<T> | Yaap",
    "keywords": "Class YaapEnumerable<T> Represents a Yaap wrapped System.Collections.Generic.IEnumerable<T> object, where the enumerator progress automatically changes the Yaap visual representation without further need to manually update the progress state Inheritance System.Object Yaap YaapEnumerable<T> Implements System.IDisposable System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members Yaap.Progress Yaap.Total Yaap.Disable Yaap.Position Yaap.Settings Yaap.ElapsedTime Yaap.TotalTime Yaap.State Yaap.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Yaap Assembly : Yaap.dll Syntax public class YaapEnumerable<T> : Yaap, IDisposable, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of objects to enumerate Methods | Improve this Doc View Source GetCheapCount(IEnumerable<T>) Attempt to get a \"cheap\" count value for the System.Collections.Generic.IEnumerable<T> , where \"cheap\" means that the enumerable is never consumed no matter what Declaration public static int GetCheapCount(IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The System.Collections.Generic.IEnumerable<T> object Returns Type Description System.Int32 The count value, or -1 in case the cheap count failed | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> Returns an enumerator that iterates through the collection. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IDisposable System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods YaapEnumerableExtensions.Yaap<T>(IEnumerable<T>, Int64, Int64, YaapSettings)"
  },
  "api/Yaap.Yaap.html": {
    "href": "api/Yaap.Yaap.html",
    "title": "Class Yaap | Yaap",
    "keywords": "Class Yaap Represents a text mode progress bar control, that can visually provide user feedback as to the progress a long-standing operation, including progress visualization, elapsed time, total time, rate and more Inheritance System.Object Yaap YaapEnumerable<T> Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Yaap Assembly : Yaap.dll Syntax public class Yaap : IDisposable Constructors | Improve this Doc View Source Yaap(Int64, Int64, YaapSettings) Initializes a new instance of the Yaap class. Declaration [PublicAPI] public Yaap(long total, long initialProgress = 0L, YaapSettings settings = null) Parameters Type Name Description System.Int64 total The (optional)total number of elements of the wrapped System.Collections.Generic.IEnumerable<T> that will be enumerated System.Int64 initialProgress The (optional) initial progress value YaapSettings settings The (optional) visual settings overrides Properties | Improve this Doc View Source Disable Whether to disable the entire progressbar display Declaration [PublicAPI] public bool Disable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ElapsedTime The elapsed amount of time this operation has taken so far Declaration [PublicAPI] public TimeSpan ElapsedTime { get; } Property Value Type Description System.TimeSpan The elapsed time. | Improve this Doc View Source Position The vertical position of this instance in relation to other concurrently \"live\" Yaap objects Declaration [PublicAPI] public int Position { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Progress The current progress value of the progress bar Always between 0 .. Total Declaration [PublicAPI] public long Progress { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source Settings The visual settings used for this instance Declaration [PublicAPI] public YaapSettings Settings { get; } Property Value Type Description YaapSettings The settings. | Improve this Doc View Source State The current YaapState of the instance Declaration public YaapState State { get; set; } Property Value Type Description YaapState The state. | Improve this Doc View Source Total The maximal value of the progress bar which represents 100% When the value is not supplied, only basic statistics will be displayed Declaration [PublicAPI] public long Total { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalTime The predicted total amount of time this operation will take Declaration [PublicAPI] public TimeSpan TotalTime { get; } Property Value Type Description System.TimeSpan The total time. Methods | Improve this Doc View Source Dispose() Releases all resources used by the progress bar Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Yaap.YaapSettings.html": {
    "href": "api/Yaap.YaapSettings.html",
    "title": "Class YaapSettings | Yaap",
    "keywords": "Class YaapSettings Yaap visual settings, used when constructing a Yaap object Inheritance System.Object YaapSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Yaap Assembly : Yaap.dll Syntax public class YaapSettings Properties | Improve this Doc View Source ColorScheme A YaapColorScheme instance representing the desired color scheme for Yaap Declaration [PublicAPI] public YaapColorScheme ColorScheme { get; set; } Property Value Type Description YaapColorScheme | Improve this Doc View Source Description Specifies a prefix for the progress bar text that should be used to uniquely identify the progress bar meaning/content to the user. Declaration [PublicAPI] public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Elements A flags or'd value specifying which visual elements will be presented to the user Declaration [PublicAPI] public YaapElement Elements { get; set; } Property Value Type Description YaapElement | Improve this Doc View Source Leave Leave the progress bar visually on screen once it is done/closed Declaration [PublicAPI] public bool Leave { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SmoothingFactor Exponential moving average smoothing factor for speed estimates. Ranges from 0 (average speed) to 1 (current/instantaneous speed) [default: 0.3]. Declaration [PublicAPI] public double SmoothingFactor { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Style The select visual style for the progress bar, only taken into account when UseASCII is set to false (which is the default) and the underlying terminal supports unicode properly Declaration [PublicAPI] public YaapBarStyle Style { get; set; } Property Value Type Description YaapBarStyle | Improve this Doc View Source UnitName used to name the unit unit of progress. [default: 'it'] Declaration [PublicAPI] public string UnitName { get; set; } Property Value Type Description System.String | Improve this Doc View Source UnitScale If set, and UseMetricAbbreviations is set to false, will be used to scale the Progress and Total values Declaration [PublicAPI] public double? UnitScale { get; set; } Property Value Type Description System.Nullable < System.Double > | Improve this Doc View Source UseASCII Use only ASCII charchters (notably the '#' charchter as the progress bar 'progress' glyph Declaration [PublicAPI] public bool UseASCII { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseMetricAbbreviations If set, will be used to scale the Progress and Total values, using the International System of Units standard. (kilo, mega, etc.) Declaration [PublicAPI] public bool UseMetricAbbreviations { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source VerticalPosition Specify the line offset to print this bar (starting from 0). Automatic when unspecified. Useful to manage multiple bars at once (eg, from multiple threads). Declaration [PublicAPI] public int? VerticalPosition { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Width Constrain the prgoress bar to a specific width, when not specified, the progress bar will take up the width of the terminal. If not set, the progress bar will resize dynamically as the windows changes size Can be set to System.Console.WindowWidth in case the user wishes to constrain the progress bar to the current windows width, or any other width for that matter. Declaration [PublicAPI] public int? Width { get; set; } Property Value Type Description System.Nullable < System.Int32 >"
  },
  "api/Yaap.YaapConsole.html": {
    "href": "api/Yaap.YaapConsole.html",
    "title": "Class YaapConsole | Yaap",
    "keywords": "Class YaapConsole A wrapper for System.Console Write*() APIs that makes sure the console writing doesn't interefere with Yaap operations Inheritance System.Object YaapConsole Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Yaap Assembly : Yaap.dll Syntax public static class YaapConsole Methods | Improve this Doc View Source Write(String) Writes the specified string value to the standard output stream. Declaration [PublicAPI] public static void Write(string s) Parameters Type Name Description System.String s The value to write. Remarks If value is null, nothing is written to the standard output stream. | Improve this Doc View Source WriteLine() Writes the current line terminator to the standard output stream. Declaration [PublicAPI] public static void WriteLine() | Improve this Doc View Source WriteLine(String) Writes the specified string value, followed by the current line terminator, to the standard output stream. Declaration [PublicAPI] public static void WriteLine(string s) Parameters Type Name Description System.String s The value to write."
  },
  "api/Yaap.YaapBarStyle.html": {
    "href": "api/Yaap.YaapBarStyle.html",
    "title": "Enum YaapBarStyle | Yaap",
    "keywords": "Enum YaapBarStyle An enumeration representing the various visual styles of a Yaap progress bar component Namespace : Yaap Assembly : Yaap.dll Syntax [PublicAPI] public enum YaapBarStyle Fields Name Description BarHorizontal A Yaap progress bar style that uses the unicode charchters: '▏', '▎', '▍', '▌', '▋', '▊', '▉', '█' BarVertical A Yaap progress bar style that uses the unicode charchters: '▁', '▂', '▃', '▄', '▅', '▆', '▇', '█' Circles1 A Yaap progress bar style that uses the unicode charchters: Circles2 A Yaap progress bar style that uses the unicode charchters: Clock A Yaap progress bar style that uses the unicode charchters: '○', '◔', '◐', '◕', '⬤' DotsHorizontal A Yaap progress bar style that uses the unicode charchters: '⣀', '⣄', '⣤', '⣦', '⣶', '⣷', '⣿' DotsVertical A Yaap progress bar style that uses the unicode charchters: '⣀', '⣄', '⣆', '⣇', '⣧', '⣷', '⣿' LongMesh A Yaap progress bar style that uses the unicode charchters: Parallelogram A Yaap progress bar style that uses the unicode charchters: Rectangles1 A Yaap progress bar style that uses the unicode charchters: Rectangles2 A Yaap progress bar style that uses the unicode charchters: ShortMesh A Yaap progress bar style that uses the unicode charchters: ShortSquares A Yaap progress bar style that uses the unicode charchters: Squares1 A Yaap progress bar style that uses the unicode charchters: '□', '◱', '◧', '▣', '■' Squares2 A Yaap progress bar style that uses the unicode charchters: '□', '◱', '▨', '▩', '■' Squares3 A Yaap progress bar style that uses the unicode charchters: '□', '◱', '▥', '▦', '■'"
  },
  "api/Yaap.YaapEnumerableExtensions.html": {
    "href": "api/Yaap.YaapEnumerableExtensions.html",
    "title": "Class YaapEnumerableExtensions | Yaap",
    "keywords": "Class YaapEnumerableExtensions A static extension class that provides System.Collections.Generic.IEnumerable<T> YaapEnumerable<T> wrappers Inheritance System.Object YaapEnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Yaap Assembly : Yaap.dll Syntax public static class YaapEnumerableExtensions Methods | Improve this Doc View Source Yaap<T>(IEnumerable<T>, Int64, Int64, YaapSettings) Wrap the provided System.Collections.Generic.IEnumerable<T> with a YaapEnumerable<T> object Declaration public static YaapEnumerable<T> Yaap<T>(this IEnumerable<T> e, long total = -1L, long initialProgress = 0L, YaapSettings settings = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> e The System.Collections.Generic.IEnumerable<T> instance to wrap System.Int64 total The (optional)total number of elements of the wrapped System.Collections.Generic.IEnumerable<T> that will be enumerated System.Int64 initialProgress The (optional) initial progress value YaapSettings settings The (optional) visual settings overrides Returns Type Description YaapEnumerable <T> The newly instantiated YaapEnumerable<T> wrapping the provided System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T The type of objects to enumerate"
  },
  "api/Yaap.YaapColorScheme.html": {
    "href": "api/Yaap.YaapColorScheme.html",
    "title": "Class YaapColorScheme | Yaap",
    "keywords": "Class YaapColorScheme A class representing the various colors that can be applied to Yaap Inheritance System.Object YaapColorScheme Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Yaap Assembly : Yaap.dll Syntax public class YaapColorScheme Fields | Improve this Doc View Source Bright The Bright Yaap color scheme for Yaap Declaration public static YaapColorScheme Bright Field Value Type Description YaapColorScheme | Improve this Doc View Source Dark The Bright Yaap color scheme for Yaap Declaration public static YaapColorScheme Dark Field Value Type Description YaapColorScheme | Improve this Doc View Source NoColor The \"no-color\" color scheme for Yaap Declaration public static YaapColorScheme NoColor Field Value Type Description YaapColorScheme Properties | Improve this Doc View Source ProgressBarColor The TerminalColor of the ProgressBar element when in Running Declaration public TerminalColor ProgressBarColor { get; set; } Property Value Type Description TerminalColor | Improve this Doc View Source ProgressBarPausedColor The TerminalColor of the ProgressBar element when in Paused Declaration public TerminalColor ProgressBarPausedColor { get; set; } Property Value Type Description TerminalColor | Improve this Doc View Source ProgressBarStalledColor The TerminalColor of the ProgressBar element when in Stalled Declaration public TerminalColor ProgressBarStalledColor { get; set; } Property Value Type Description TerminalColor | Improve this Doc View Source ProgressCountColor The TerminalColor of the ProgressCount element Declaration public TerminalColor ProgressCountColor { get; set; } Property Value Type Description TerminalColor | Improve this Doc View Source ProgressPercentColor The TerminalColor of the ProgressPercent element Declaration public TerminalColor ProgressPercentColor { get; set; } Property Value Type Description TerminalColor | Improve this Doc View Source RateColor The TerminalColor of the Rate element Declaration public TerminalColor RateColor { get; set; } Property Value Type Description TerminalColor | Improve this Doc View Source TimeColor The TerminalColor of the Time element Declaration public TerminalColor TimeColor { get; set; } Property Value Type Description TerminalColor"
  },
  "api/Yaap.TerminalColor.html": {
    "href": "api/Yaap.TerminalColor.html",
    "title": "Class TerminalColor | Yaap",
    "keywords": "Class TerminalColor A class that represents a color that is either originated from System.ConsoleColor instance or from a System.Drawing.Color instance. Inheritance System.Object TerminalColor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Yaap Assembly : Yaap.dll Syntax public class TerminalColor Properties | Improve this Doc View Source EscapeCode The vt100 escape code that should generate this TerminalColor on screen Declaration [PublicAPI] public string EscapeCode { get; } Property Value Type Description System.String | Improve this Doc View Source None A TerminalColor representing no color change Declaration [PublicAPI] public static TerminalColor None { get; } Property Value Type Description TerminalColor | Improve this Doc View Source Reset A TerminalColor representing a reset of the terminal coloring back to the default color Declaration [PublicAPI] public static TerminalColor Reset { get; } Property Value Type Description TerminalColor Methods | Improve this Doc View Source FromColor(Color, Boolean) Create a TerminalColor instance from a System.Drawing.Color Declaration public static TerminalColor FromColor(Color color, bool bg = false) Parameters Type Name Description System.Drawing.Color color The System.Drawing.Color to base this color upon System.Boolean bg a System.Boolean indicating wethear this color will be used as a background color Returns Type Description TerminalColor The newly created TerminalColor | Improve this Doc View Source FromConsoleColor(ANSIColor, ANSIColor) Create a TerminalColor instance from a System.ConsoleColor Declaration [PublicAPI] public static TerminalColor FromConsoleColor(ANSIColor fg, ANSIColor bg = ANSIColor.Default) Parameters Type Name Description ANSIColor fg The TerminalColor to use as a foreground color ANSIColor bg The TerminalColor to use as a background color Returns Type Description TerminalColor The newly created TerminalColor"
  },
  "api/Yaap.YaapState.html": {
    "href": "api/Yaap.YaapState.html",
    "title": "Enum YaapState | Yaap",
    "keywords": "Enum YaapState The current state of the Yaap instance Namespace : Yaap Assembly : Yaap.dll Syntax [PublicAPI] public enum YaapState Fields Name Description Paused The yaap instance is paused Running The yaap instance is running (progressing) Stalled The yaap instance is stalled"
  },
  "api/Yaap.ANSIColor.html": {
    "href": "api/Yaap.ANSIColor.html",
    "title": "Enum ANSIColor | Yaap",
    "keywords": "Enum ANSIColor An enum representing the one true set of 3/4 bit ANSI colors Feel free to read more about ansi color codes: https://en.wikipedia.org/wiki/ANSI_escape_code#Colors Namespace : Yaap Assembly : Yaap.dll Syntax public enum ANSIColor Fields Name Description Black Roughly 0,0,0 Blue Roughly 0,0,170 BrightBlack Roughly 85,85,85 BrightBlue Roughly 85,85,255 BrightCyan Roughly 85,255,255 BrightGreen Roughly 85,255,85 BrightMagenta Roughly 255,85,255 BrightRed Roughly 255,85,85 BrightWhite Roughly 255,255,255 BrightYellow Roughly 255,255,85 Cyan Roughly 0,170,170 Default No color (Reset/Normal) Green Roughly 0,170,0 Magenta Roughly 170,0,170 Red Roughly 170,0,0 White Roughly 170,170,170 Yellow Roughly 170,85,0"
  },
  "articles/start-here.html": {
    "href": "articles/start-here.html",
    "title": "What does it do | Yaap",
    "keywords": "What does it do Much like in python, Yaap can make .NET loops, IEnumerable s and more show a smart progress meter. The most dead simple way of starting with Yaap is to add it via the nuget package and using Yaap; foreach (var i in Enumerable.Range(0, 1000).Yaap()) { Thread.Sleep(10); } Will display a continuously updating progress bar like this, on Mac/Linux: 76%|████████████████████████████ | 7568/10000 [00:07s<00:10s, 229.00it/s] Unfortunately, getting nice looking progress to show up on Windows is not so straight forward, unless you follow these instructions ... Out of the box, On Windows, the progress bar will be less visually appeaking and use ASCII characters: 76%|############################ | 7568/10000 [00:07s<00:10s, 229.00it/s]"
  },
  "articles/FAQ.html": {
    "href": "articles/FAQ.html",
    "title": "FAQ and Known Issues | Yaap",
    "keywords": "FAQ and Known Issues What sort of terminal support is required? Single progress bar at a time: only carriage-return ( '\\r' ) is needed Nested /Multi progress bars: require support for moving the cursor up/down in addition to carriage-return What specific terminals actually work well with Yaap? On Linux/Mac all terminal have full vt100 support, and should therefore work flawlessly On windows, things should work well on any version of windows, except for Unicode support, which has its own page on how to make that ok-ish as well. Generally speaking, CMD.exe and ConEmu have been known to work well Will Yapp enumerate through the IEnumerable<T> to get the total count? Absolutely not! Yaap goes through every possible known way of getting the Count \"value\" of the IEnumerable<T> WITHOUT actually enumerating it. This means that when an ICollection / Array / IList object is passed to Yaap, it will actually read the Count / Length property instead. Finally, Yaap uses and undocumented internal .NET interface called IIListProvider which can, sometimes calculate the count value of the enumerable without consuming it. For more information on what works/doesn't, consult the specific unit tests . Finally, when all else fails, Yaap will throw an exception, explaining that the total progress value has to be provided by the user, for Yaap to work. Can I write to the console while the progress bars are being updated? Yes, but not directly though Console.Write*() but rather going through YaapConsole.Write*() wrapper functions, which keep everything nice and tidy Does dynamic resizing work? Kind of: When enlarging the width everything should be OK, when reducing the width, the screen could get momentarily garbled, but everything should look ok, \"eventually\"..."
  },
  "articles/Windows.html": {
    "href": "articles/Windows.html",
    "title": "Windows terminal support | Yaap",
    "keywords": "Windows terminal support Windows terminal support, for the purposes of Yaap is pretty complete, and in general one should really expect Yaap to work perfectly fine in cmd.exe. In general most features don't require anthing special to display Yaap's progress bar, except for one quirk: Unicode progress bars: Unicode progress bars use various characters in the \"Block Elements\" unicode block , and for some unknown reason, no pre-packages windows font provides these characters (e.g. Lucida Console , Consolas and other default windows fonts)... Luckily not all is lost, as there are fonts that do work with cmd.exe that do provide these charchters. The rest of this page will guide you, the poor windows user, in getting Yaap to properly display progress bars on windows WITH the special unicode charcters.. Install some not-crappy fonts Yaap has been tested to work with the following font families on Windows: \"Hack\" \"InputMono\" \"Hasklig\" \"DejaVu Sans Mono\" \"Iosevka\" On top normal cmd.exe support, Yaap also detects ConEmu and Cmder (Which uses ConEmu internally)"
  }
}